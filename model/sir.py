# -*- coding: utf-8 -*-
# """SIR.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1yJIOE-4Akzdb74y591RyuNf2EmEhpcP1
# """
import os

import numpy as np
from scipy.integrate import odeint
import pandas as pd
from datetime import datetime

# print(beta, gamma)

# print(beta)
# print(gamma)

#User SIR model to simulate number of infection individuals in the next 100 days.

#S: number of susceptible people (in stock)
#I: number number of infectious people (in stock)
#R: number of removed (immuted/dead) people  (in stock)
#Note:	S	+	I	+	R	=	N. N is constant in SIR model, so we need to get S	and	I. R = N-S-I

# To forecast the susceptible people, we need to calculate transmission rate
# transition rate is: d(S/N)/dt = -βSI/N^2
# in the SIR model, beta (β) is an important transmission	parameter.
# according the thoery (from wiki), beta (β) is the average number of contacts per person per time, multiplied by the probability of disease transmission in a contact between a susceptible and an infectious subject
# The higher the beta, the faster the COVID-19 could transmit.
#let's set initial beta = 0.1, user can adjust this parameter
# beta = 0.1

#Another important parameter is gamma (γ)
#Assume	the recovery	rate	of	γ	is constant. 1/γ	is average durationon of infection
# let's set initial gamma = 1/21 (three weeks)
# gamma = 1/21

#calculate S0 (current susceptible people). We assume it equals to total population - current infected cases - current recovered cases
#assume people can get infected again.

#total population in the united states (in thousands)
N = 380000000/1000
#current number of total infected cases
I_0 = 31918362/1000
#current number of recovered cases
R_0 = 24480325/1000
#get susceptible number for t0:
S_0 = N - I_0 - R_0

# set up intial vector v0
v0 = S_0, I_0, R_0

#according to the SIR thoery:
#https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#:~:text=Between%20S%20and%20I%2C%20the,is%20the%20fraction%20of%20those

#dS/dt = (-beta * S * I) /N
#dI/dt = (beta * S * I)/N - gamma *I
#dR/dt = gamma * I
time_100 = np.linspace(start=0, stop=100, num=100)
# The SIR model differential equations. get dS/dt, dI/dt and dR/dt
def SIR_forecasting(v, time_100, N, beta, gamma):
    S, I, R = v
    return np.array([(-beta * S * I) / N, (beta * S * I)/ N - gamma * I, gamma * I])

# #https://apmonitor.com/pdc/index.php/Main/SolveDifferentialEquations
# we need to solve a differential equation for SIR. In Python, we can use odeint(func, y0, args = ())

#note another similar function is solve_ivp（） reference: https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html

def get_SIR_result():
    os.makedirs(os.path.dirname('./temp/si_submit.txt'), exist_ok=True)
    if os.path.isfile('./temp/si_submit.txt'):
        with open('./temp/si_submit.txt') as f:
            lines = f.readlines()
            result = []
            for i in lines:
                result.append({
                    "a": i.split(",")[0],
                    "b": i.split(",")[1],
                })

        beta = float(result[-1]["a"])
        gamma = float(result[-1]["b"])
    else:
        beta = 0.1
        gamma = 1.0 / 21

    solution = odeint(SIR_forecasting, v0, time_100, args=(N, beta, gamma))

    #print(solution)

    S = solution.T[0] #S: number of susceptible people (in stock)
    I = solution.T[1] #I: number number of infectious people (in stock)
    R = solution.T[2] #R: number of removed (immuted/dead) people  (in stock)

    # print(S)

    date_list = pd.date_range(start = datetime.today(), periods = 100).to_pydatetime().tolist()


    with open("./temp/sir.txt", "a", newline='') as file:
        i = 1
        while i < len(S):
            file.write(str(date_list[i]) + "," + str(S[i]) + "," + str(I[i]) + "," + str(R[i]) + "," + "\n")
            i += 1
